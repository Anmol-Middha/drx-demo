{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","frequency","duration","durationType","instructions","medicine","medicineGroup","handleConcatFunction","bind","handleChangeFunction","addMedicince","clearMedicine","Axios","get","headers","params","name","then","rslt","console","log","catch","err","prevState","this","push","setState","temparray","index","indexOf","splice","e","target","value","Container","Form","Group","controlId","Control","placeholder","type","onChange","Row","Col","xs","ButtonToolbar","ToggleButtonGroup","defaultValue","onClick","ToggleButton","variant","span","offset","Button","length","map","string","Alert","style","maxHeight","dismissible","onClose","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4b15f09c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Form, Row, Col, Button, Dropdown, ButtonGroup, ButtonToolbar, ToggleButtonGroup, ToggleButton, Alert } from 'react-bootstrap';\nimport Axios from 'axios';\n\nexport default class App extends Component {\nconstructor(props){\n  super(props);\n  this.state = {\n    frequency: \"101\",\n    duration: \"1\",\n    durationType: \"days\",\n    instructions: \"After Meal\",\n    medicine: \"\",\n    medicineGroup: []\n  }\n  this.handleConcatFunction = this.handleConcatFunction.bind(this);\n  this.handleChangeFunction = this.handleChangeFunction.bind(this);\n  this.addMedicince = this.addMedicince.bind(this);\n  this.clearMedicine = this.clearMedicine.bind(this);\n}\n\ncomponentDidMount(){\n  Axios.get(\"https://bfhlapiservice.azure-api.net/self-learning-dev/rest/masterListrx/medicine\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Ocp-Apim-Subscription-Key\": \"a42d2bc16d9142c8bb598d3e40f4ba24\"\n    },\n    params: {\n      name: \"dolo\"\n    },\n  })\n  .then(rslt=>{\n    console.log(rslt);\n  })\n  .catch(err=>{\n    console.log(err);\n  })\n}\n\naddMedicince(){\n  let prevState = this.state.medicineGroup;\n  prevState.push(this.state.medicine);\n  this.setState(({\n    medicineGroup: prevState\n  }))\n}\n\nclearMedicine(medicine){\n  const temparray = this.state.medicineGroup;\n  const index = temparray.indexOf(medicine);\n  if (index > -1) {\n  temparray.splice(index, 1);\n  this.setState({\n    medicineGroup: temparray\n  })\n}\n  // let prevState = this.state.medicineGroup;\n  // prevState.filter(item => item !== medicine)\n  // console.log(prevState);\n  // this.setState({\n  //   medicineGroup: prevState\n  // })\n}\n\nhandleChangeFunction(e){\n \n\n  this.setState({\n    medicine: e.target.value\n  })\n}\n\nhandleConcatFunction(e){\n  this.setState({\n    [e.target.name] : e.target.value,\n    // medicine: this.state.frequency + this.state.duration + this.state.instructions\n  }, ()=>{\n    this.setState({\n      medicine: this.state.frequency + \"/\" + this.state.duration +  this.state.durationType + \"/\" + this.state.instructions\n    })\n  })\n}\n\n  render() {\n    return (\n      <Container>\n        <br/>\n        <Form>\n          <Form.Group controlId=\"formGridAddress1\">\n            <Form.Control value={this.state.medicine} placeholder=\"Search Medicine\" type=\"text\" onChange={this.handleChangeFunction}/>\n            <hr/>\n            <Row>\n            <Col xs={3}>\n            <label>Frequency</label>\n            </Col>\n            <Col xs={9}>\n            <ButtonToolbar>\n            <ToggleButtonGroup type=\"radio\" name=\"frequency\" defaultValue={101} onClick={this.handleConcatFunction}>\n              <ToggleButton variant=\"outline-info\" value={101}>101</ToggleButton>\n              <ToggleButton variant=\"outline-info\" value={111}>111</ToggleButton>\n              <ToggleButton variant=\"outline-info\" value={110}>110</ToggleButton>\n            </ToggleButtonGroup>\n            </ButtonToolbar>\n            </Col>\n            </Row>\n            <br/>\n            <Row>\n            <Col xs={3}>\n            <label>Duration</label>\n            </Col>\n            <Col xs={2}>\n            <ButtonToolbar>\n              <ToggleButtonGroup type=\"radio\" name=\"duration\" defaultValue={1} onClick={this.handleConcatFunction}>\n                <ToggleButton variant=\"outline-info\" value={1}>1</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={2}>2</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={3}>3</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={4}>4</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={5}>5</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={6}>6</ToggleButton>\n                <ToggleButton variant=\"outline-info\"  value={7}>7</ToggleButton>\n              </ToggleButtonGroup>\n            </ButtonToolbar>\n            </Col>\n            <Col xs={{span: 2, offset: 1}}>\n            <ButtonToolbar>\n              <ToggleButtonGroup type=\"radio\" name=\"durationType\" defaultValue={\"days\"} onClick={this.handleConcatFunction}>\n                <ToggleButton variant=\"outline-info\" value={\"days\"}>days</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={\"weeks\"}>weeks</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={\"months\"}>months</ToggleButton>\n              </ToggleButtonGroup>\n            </ButtonToolbar>\n            </Col>\n            </Row>\n            <br/>\n            <Row>\n            <Col xs={3}>\n            <label>Instructions</label>\n            </Col>\n            <Col xs={9}>\n              <ButtonToolbar>\n              <ToggleButtonGroup type=\"radio\" name=\"instructions\" defaultValue={\"After Meal\"} onClick={this.handleConcatFunction}>\n                <ToggleButton variant=\"outline-info\" value={\"Before Meal\"}>Befor Meal</ToggleButton>\n                <ToggleButton variant=\"outline-info\" value={\"After Meal\"}>After Meal</ToggleButton>\n              </ToggleButtonGroup>\n              </ButtonToolbar>\n            </Col>\n          </Row>\n          <br/>\n          </Form.Group>\n        </Form>\n        <Row>\n          <Col xs={{offset: 11, span:1}}>\n            <Button variant=\"info\" onClick={this.addMedicince}>Add</Button>\n          </Col>\n        </Row>\n        <hr/>\n        {this.state.medicineGroup.length>0 ?\n        <h5>Medicines</h5>: <></>}\n        {this.state.medicineGroup.length>0?\n          this.state.medicineGroup.map((string)=>{\n            return(\n            <Alert style={{maxHeight: '50px'}} variant=\"info\" dismissible  onClose={() => this.clearMedicine(string)} >\n              <p>{string}</p>\n            </Alert>)\n          })\n        :<></>}\n      </Container>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}